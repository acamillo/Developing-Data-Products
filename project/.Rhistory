## Transform the activity name and feature name, from strings to factors.
tt$activity <- factor(tt$activityName)
tt$feature <- factor(tt$featureName)
### Seperate features from featureName.
grepthis <- function(regex) {
grepl(regex, tt$feature)
}
## In the followin part we procude some temporary matrixes, one for each
## different kind of feature, or in other words, we classify the features
## in groups based on the number of categories used by each features.
## These groups are just three, since the feature in the dataset can be
## classified with one, two or category. For each of this group
## we extract the relavent factors and produce a temporary matrix "x".
## Once the temporary matrix are properly filled in, we trasform the matrix
## into a new column to be added to the final tidy dataset.
## Features with 2 categories
n <- 2
temp_column <- matrix(seq(1, n), nrow = n)
temp_mat <- matrix(c(grepthis("^t"), grepthis("^f")), ncol = nrow(temp_column))
tt$Domain <- factor(temp_mat %*% temp_column, labels = c("Time", "Freq"))
temp_mat <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol = nrow(temp_column))
tt$Instrument <- factor(temp_mat %*% temp_column, labels = c("Accelerometer", "Gyroscope"))
temp_mat <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol = nrow(temp_column))
tt$Acceleration <- factor(temp_mat %*% temp_column, labels = c(NA, "Body", "Gravity"))
temp_mat <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol = nrow(temp_column))
tt$Variable <- factor(temp_mat %*% temp_column, labels = c("Mean", "SD"))
## Features with 1 category
tt$Jerk <- factor(grepthis("Jerk"), labels = c(NA, "Jerk"))
tt$Magnitude <- factor(grepthis("Mag"), labels = c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
temp_column <- matrix(seq(1, n), nrow = n)
temp_mat <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol = nrow(temp_column))
tt$Axis <- factor(temp_mat %*% temp_column, labels = c(NA, "X", "Y", "Z"))
## The tidy dataset is almost ready. We now set the indexing key as a
## combination of the subject + the activity + all the features extracted.
setkey(tt, subject, activity, Domain, Acceleration, Instrument,
Jerk, Magnitude, Variable, Axis)
## We are ready. For each group of features, according to the definition of its key
## of the data.table, as set in the line above,  we count the elements and calculate
## the mean value thus reducing and reducing the number of raw observations from about
## 680K yo just 12K.
dtTidy <- tt[, list(count = .N, average = mean(value)), by = key(tt)]
# Finally we dump the tidy dateset to an output file. This process loose
# all the attributes created by this script such as factor, key etc.
# This is unavoidable since the assignment specification requires us
# to export the tidy dataset into a portable format as write.table does.
write.table(dtTidy, file.path(pathIn, "tidyset.txt"),
##            quote = FALSE,
##            sep = ",",
row.names = FALSE)
## xx <- read.table(file.path(pathIn, "tidyset.txt"))
## str(xx)
## Compile the  codebook.
library(knitr)
library(markdown)
knit( "codebook.Rmd",  output= "codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML( "codebook.md", "codebook.html")
names(dtTidy)
str(dtTidy)
rm(list=ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?mean
mean(x)
mean(x*w)
weighted.mean(x,w)
w*x
sum(w*x)
sum(w*x) / sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
lm( y ~ x - 1 )
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
corrXoverY <- 0.5
sdYoverX <- 2
beta <- corrXoverY*sdYoverX
beta
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
summary(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)$coefficients
fit <- lm(y ~ x)
summary(fit)
fit <- lm(mpg ~ wt, mtcars)
newdata <- data.frame(wt=mean(mtcars$wt))
mean(mtcars$wt)
predict(fit, newdata, interval=("confidence"))
fit <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
confint(fit)
newdata
wt
newdata <- data.frame(wt=3)
predict(fit, newdata, interval=("prediction"))
fit <- lm(mpg ~ wt, mtcars)
newdata <- data.frame(wt=mean(mtcars$wt))
predict(fit, newdata, interval=("confidence"))
newdata <- data.frame(wt=3)
predict(fit, newdata, interval=("prediction"))
conf.interval.slope <- c(-1, 1) * qt(0.975, df=fit$df) * summary(fit)$coef[2, 2] + summary(fit)$coef[2, 1]
conf.interval.slope * 2
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit)[2, ]
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit)[2, ] * 2
fit1 <- lm(mpg ~ wt, data = mtcars)
fit2 <- lm(mpg ~ 1, data = mtcars)
1 - summary(fit1)$r.squared
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
install.packages("rCharts")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
install.packages("UsingR")
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyServer(
function(input, output) {
output$myHist <- plotOutput({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
runApp("app-quiz-1")
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),#comma needed here
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyServer(
function(input, output) {
output$myHist <- plotOutput({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
shinyServer(
function(input, output) {
output$myHist <- plotOutput({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyServer(
function(input, output) {
output$myHist <- plotOutput({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
rm(list=ls())
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
shinyServer(
function(input, output) {
output$myHist <- plotOutput({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shiny::runApp('datasciencecoursera')
shiny::runApp('datasciencecoursera')
shiny::runApp('datasciencecoursera')
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
n <-1000
rnorm(n)
cumsum(rnorm(n))
?cumsum
cumsum(1:10)
1:10
cumsum(1:10)/(1:n)
mean(cumsum(1:10)/(1:n))
sample(0:1)
sample(0:1, 10)
sample(0:1, 10, replace = T)
sample(0:1, 10, replace = T)
sample(0:1, 10, replace = T)
cumsum(sample(1:6, 10, replace = T)) /(1:n)
cumsum(sample(1:6, n, replace = T)) /(1:n)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
library(caret)
shiny::runApp('datasciencecoursera/developing-data-products/test2')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
?selectInput
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
shiny::runApp('datasciencecoursera/developing-data-products/project')
library(rCharts)
setwd("datasciencecoursera/developing-data-products/project/")
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = 'bar')
r2
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = 'multiBarChart')
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair, color = 'Eye', data = haireye, type = "multiBarChart")
r2
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = "multiBarChart")
r2
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = "barChart")
r2
r2
haireye = as.data.frame(HairEyeColor)
r2 <- nPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = "bar")
r2
haireye = as.data.frame(HairEyeColor)
r2 <- rPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = "bar")
r2
haireye = as.data.frame(HairEyeColor)
r2 <- rPlot( Freq ~ Hair | Eye, color = 'Eye', data = haireye, type = "bar")
r3  <- nPlot( Freq ~ Hair, group = 'Eye', data = haireye, type = "multiBarChart")
r2
r3
HairEyeColor
haireye
library(dplyr)
# Load the dataset
df = read.csv2("istruzione.csv", header = F, sep =";", skip=1)
# Set the proper colum names and remove unwanted entries by subsetting
names(df) <- c("country", "level", "year")
df <- df[! is.na(df$level), 1:3]
# Fetch the values for initializing the selection boxes of the UI.
# We need a listing of Countries and a listing of Years.
countries <- sort(unique(df$country))
years <-  sort(unique(df$year))
df2
y = 2013
df2 <- filter(df, year == y) %>%
arrange(desc(level))
df2
r3  <- nPlot( level ~ country, data = df2, type = "bar")
r3
r3  <- rPlot( level ~ country, data = df2, type = "bar")
r3
?rPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
g  <- rPlot( level ~ country, data = df2, type = "bar")
g
nPlot( level ~ country, data = df2, type = "bar")
rPlot( level ~ country, data = df2, type = "bar")
r <- rPlot( level ~ country, data = df2, type = "bar")
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(title = list(enabled = TRUE, text = 'Country'), labels = list(rotation = -30, align = 'right'), replace = T)
r$exporting(enabled = F)
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(title = list(enabled = TRUE, text = 'Country'), labels = list(rotation = -30, align = 'right'), replace = T)
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(title = list(enabled = TRUE, text = 'country'), labels = list(rotation = -30, align = 'right'), replace = T)
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(title = list(enabled = TRUE, text = 'country'), labels = list(rotation = -30, align = 'right'), replace = T)
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200)
r
r$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200, staggerLabels = TRUE)
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200, staggerLabels = TRUE)
r
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$chart(reduceXTicks = FALSE)
r$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200)
r
options(RCHART_WIDTH = 500)
r <- nPlot( level ~ country, data = df2, type = "multiBarChart")
r$chart(reduceXTicks = FALSE)
r$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200)
r
shiny::runApp()
shiny::runApp()
g <- nPlot( level ~ year,
data = df2,
type = "multiBarChart",
width = 650
)
g$chart(margin = list(left = 100))
g$yAxis(axisLabel = "Year", width = 80)
g$xAxis(axisLabel = "% Of the Population", width = 70)
g
g <- nPlot( level ~ year,
data = df2,
type = "multiBarChart")
g
df
head(df2)
g <- nPlot( level ~ country,
data = df2,
type = "multiBarChart",
width = 650)
g$chart(reduceXTicks = FALSE)
g$xAxis(axisLabel = "Country", width = 200, rotateLabels = -20, height = 200)
g
df2 <- filter(df, country == selected_country) %>%
arrange(desc(level))
selected_country = "Italia"
df2 <- filter(df, country == selected_country) %>%
arrange(desc(level))
df2
g <- nPlot( level ~ year,
data = df2,
type = "multiBarChart",
width = 650
)
g$chart(margin = list(left = 100))
g$yAxis(axisLabel = "Year", width = 80)
g$xAxis(axisLabel = "% Of the Population", width = 70)
g
g <- nPlot( level ~ year,
data = df2,
type = "multiBarChart",
width = 650
)
g$chart(margin = list(left = 100))
g$chart(reduceXTicks = FALSE)
g$xAxis(axisLabel = "Year", width = 80)
g$yAxis(axisLabel = "% Of the Population", width = 70)
g
df2
str(df2)
df2 <- filter(df, country == selected_country) %>%
arrange((level))
g <- nPlot( level ~ year,
data = df2,
type = "multiBarChart",
width = 650
)
g$chart(margin = list(left = 100))
g$chart(reduceXTicks = FALSE)
g$xAxis(axisLabel = "Year", width = 80)
g$yAxis(axisLabel = "% Of the Population", width = 70)
g
shiny::runApp()
library(shiny)
library(BH)
library(rCharts)
require(markdown)
require(data.table)
library(dplyr)
library(DT)
shiny::runApp()
shiny::runApp()
shiny::runApp()
sessionInfo()
getOption('viewer')
devtools::install_github('rCharts', 'ramnathv', ref = 'dev')
shiny::runApp()
